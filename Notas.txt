DeckClasses
    Contiene las clases, funciones y atributos relacionados con las cartas,
    desde mezclar el maso, tomar una carta, volver a poner una carta en el mazo, etc

TUnoServerSocket
    Se encargara de todo lo relacionado con recibir las conexiones de los clientes
    y comunicar la informacion de estos a la clase TUnoGame
    Luego se encargara de enviar las jugadas recibidas por los jugadores a la clase
    TUnoGame para que las procese y, luego de q este de una respuesta, lo reenvie
    a todos los jugadores


TUnoClientSocket
    Se encarga de establecer la conexion al servidor ademas de mandar la informacion del 
    jugador a dicho servidor
    Luego se encargara de recibir los datos del servidor sobre la partida y de mandar los
    datos de las jugadas del cliente

TUnoGame
    Es el encargado de armar la partida con la informacion recibida por el servidor,
    ademas de procesar las jugadas recibidas y enviar las respectivas respuestas a la
    clase TUnoServerSocket para que se lo comunique a todos los jugadores
    Admeas se encargara de manejar los turnos de los jugadores
    

TUnoMain
    Se encargara de iniciar el programa

Los mensajes del cliente al servidor son en formato Json:
    {
        "command": "create"
        "maxPlayers": <n>
        "penaltie": <n>
        "password": <password>
    }

    {
        "command": "join"
        "gameId": <gameId>
        "password": <password>        
    }

    {
        "command": "getStatus"
    }
    
    {
        "command": "play"
        "card": <card>
        "UNO": <True / false>
    }
    {
        "command": "UNO"
    }
    {
        "command": "firstComm"
        "playerId": <playerId>
    }

    {
        "command": "start"        
    }

    {
        "command": "drawcard"
    }

    {
        "command": "eatcards"
    }

    {
        "command": "quit"
    }

    {
        "command": "retartgame"
    }


Mensajes del servidor al cliente

El mensaje puede ser un string solo que corresponde a un mensaje de error o 
puede ser una lista donde el primer elemento es una descripcion del mensaje 
y de segundo un diccionario con datos de una partida (el status).
Las respuestas de las peticiones que incluyen dichos diccionarios son:
    drawcard
    eatcards    (si le corresponde tomar las cartas)
    getStatus
    restartgame (si se pudo resetear el game)
    join
    UNO         (si corresponde penalizar a un jugador)
    startgame   (si se pudo iniciar el juego)

Cuando se pide que se inicie una partida (si se logra hacerlo) a cada jugador
se le enviara una lista, el primer elemento describiendo que es el mensaje de inicio de la partida,
el segundo las cartas iniciales del jugador correspondiente al que se le envia el mensaje y de tercer
elemento el status del game

El status de un juego tiene el siguiente formato:

{
    "lastCardPlayed": {
        "name": "8",
        "color": "Green",
        "special": false
    },
    "nextPlayerToPlay": "player3",
    "isReversed": false,
    "isAddingCards": false,
    "amountToDraw": 0,
    ### el primer elemento de cada sublista es el playerId y el segundo la cantidad de cartas que tiene ###
    "players": [
        [
            "player1",
            7
        ],
        [
            "player2",
            7
        ],
        [
            "player3",
            7
        ],
        [
            "player4",
            7
        ]
    ],
    "winner": null
}

El cliente en el principio del programa estara comunicandose con el servidor
para establecer el playerId del cliente hasta que ingrese uno valido. Luego quedara
a la espera de las respuestas o de mensajes del servidor y las procesar√° dependiendo de que
tipo de mensaje sea y a que evento corresponda